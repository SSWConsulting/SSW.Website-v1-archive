%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.6 (Build 19G73) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 180 108
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 180 108
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.80000001 0.25490198 0.25490198 sc
q
8.2349997 23.597099 m
12.8565 23.597099 15.2739 25.919701 15.2739 29.024401 c
15.2739 32.840099 11.5056 33.669601 10.2495 33.953999 c
6.0071998 35.0205 5.2013998 35.210098 5.2013998 36.513599 c
5.2013998 37.9356 6.5760002 38.4333 7.7610002 38.4333 c
9.5621996 38.4333 10.9842 37.888199 11.1027 35.873699 c
14.7051 35.873699 l
14.7051 39.784199 11.4582 41.324699 7.9268999 41.324699 c
4.8695998 41.324699 1.599 39.6894 1.599 36.205502 c
1.599 33.077099 4.1349001 32.010601 6.6471 31.3944 c
9.1119003 30.7071 11.6715 30.4464 11.6715 28.597799 c
11.6715 26.867701 9.6807003 26.488501 8.3772001 26.488501 c
6.3864002 26.488501 4.6325998 27.3654 4.6325998 29.616899 c
1.0302 29.616899 l
0.95910001 25.4457 4.4903998 23.597099 8.2349997 23.597099 c
h
20.582701 24 m
20.582701 31.110001 l
20.582701 33.5037 22.1943 33.930302 22.857901 33.930302 c
24.724276 33.930302 24.884991 32.678272 24.896008 31.412638 c
24.896099 24 l
28.261499 24 l
28.261499 30.8256 l
28.261499 32.3424 28.617001 33.930302 30.513 33.930302 c
32.36871 33.930302 32.563446 32.667957 32.574364 31.106642 c
32.574902 24 l
35.9403 24 l
35.9403 32.200199 l
35.9403 35.375999 34.068001 36.584702 31.461 36.584702 c
29.754601 36.584702 28.498501 35.612999 27.7638 34.546501 c
27.100201 36.0396 25.725599 36.584702 24.185101 36.584702 c
22.5735 36.584702 21.3174 35.849998 20.4405 34.593899 c
20.393101 34.593899 l
20.393101 36.252899 l
17.2173 36.252899 l
17.2173 24 l
20.582701 24 l
h
42.244499 23.6682 m
43.761299 23.6682 45.3018 24.0711 46.368301 25.184999 c
46.391998 24.782101 46.486801 24.3792 46.605301 24 c
50.018101 24 l
49.709999 24.4977 49.591499 25.611601 49.591499 26.7255 c
49.591499 33.1008 l
49.591499 36.0396 46.652699 36.584702 44.211601 36.584702 c
41.462399 36.584702 38.642101 35.612999 38.452499 32.4846 c
41.817902 32.4846 l
41.936401 33.811798 42.742199 34.333199 44.0457 34.333199 c
45.230701 34.333199 46.226101 34.096199 46.226101 32.674198 c
46.368301 29.924999 38.120701 32.911201 38.073299 27.3417 c
38.073299 24.8295 39.898201 23.6682 42.244499 23.6682 c
h
43.500599 25.919701 m
42.4104 25.919701 41.438702 26.251499 41.438702 27.4839 c
41.438702 28.716299 42.3867 29.095501 43.429501 29.285101 c
44.472301 29.474701 45.657299 29.4984 46.226101 29.996099 c
46.226101 28.74 l
46.226101 27.9816 46.131302 25.919701 43.500599 25.919701 c
h
57.365101 23.6682 m
60.138 23.6682 62.958302 24.711 62.958302 27.9342 c
62.958302 30.2094 61.038601 30.920401 59.071499 31.370701 c
57.175499 31.820999 55.255798 31.9869 55.255798 33.195599 c
55.255798 34.214699 56.369701 34.333199 57.128101 34.333199 c
58.3368 34.333199 59.332199 33.977699 59.426998 32.674198 c
62.626499 32.674198 l
62.365799 35.684101 59.8773 36.584702 57.2229 36.584702 c
54.592201 36.584702 51.8904 35.7789 51.8904 32.650501 c
51.8904 30.4701 53.810101 29.8302 55.777199 29.3799 c
58.170898 28.8822 59.592899 28.503 59.592899 27.4839 c
59.592899 26.298901 58.3368 25.919701 57.388802 25.919701 c
56.0853 25.919701 54.8055 26.5359 54.8055 27.9816 c
51.605999 27.9816 l
51.724499 24.734699 54.521099 23.6682 57.365101 23.6682 c
h
68.290802 24 m
68.290802 30.422701 l
68.290802 32.911201 69.072899 33.930302 70.897797 33.930302 c
72.485703 33.930302 73.054497 32.934898 73.054497 30.920401 c
73.054497 24 l
76.419899 24 l
76.419899 31.5366 l
76.419899 34.570202 75.519302 36.584702 71.940598 36.584702 c
70.684502 36.584702 69.215103 35.944801 68.3619 34.546501 c
68.290802 34.546501 l
68.290802 40.921799 l
64.9254 40.921799 l
64.9254 24 l
68.290802 24 l
h
82.439697 38.148899 m
82.439697 40.921799 l
79.074303 40.921799 l
79.074303 38.148899 l
82.439697 38.148899 l
h
82.439697 24 m
82.439697 36.252899 l
79.074303 36.252899 l
79.074303 24 l
82.439697 24 l
h
88.459503 24 m
88.459503 30.422701 l
88.459503 32.911201 89.2416 33.930302 91.066498 33.930302 c
92.654404 33.930302 93.223198 32.934898 93.223198 30.920401 c
93.223198 24 l
96.5886 24 l
96.5886 31.5366 l
96.5886 34.570202 95.688004 36.584702 92.109299 36.584702 c
90.687302 36.584702 89.217903 35.944801 88.3647 34.546501 c
88.293602 34.546501 l
88.293602 36.252899 l
85.094101 36.252899 l
85.094101 24 l
88.459503 24 l
h
104.5755 19.354799 m
110.1924 19.354799 110.9271 22.767599 110.9271 24.782101 c
110.9271 36.252899 l
107.7276 36.252899 l
107.7276 34.617599 l
107.6802 34.617599 l
106.8507 36.0396 105.642 36.584702 104.0304 36.584702 c
100.6176 36.584702 98.768997 33.693298 98.768997 30.5175 c
98.768997 27.1521 100.3095 24.355499 104.0067 24.355499 c
105.4998 24.355499 106.9455 24.948 107.6802 26.251499 c
107.7276 26.251499 l
107.7276 24.6399 l
107.7513 22.8624 106.8981 21.6063 105.0258 21.6063 c
103.8171 21.6063 102.8217 22.0329 102.5136 23.289 c
99.171898 23.289 l
99.361504 20.5161 102.1581 19.354799 104.5755 19.354799 c
h
104.8599 26.891399 m
102.7743 26.891399 102.1344 28.8111 102.1344 30.564899 c
102.1344 32.389801 102.9639 34.048801 104.8599 34.048801 c
107.0403 34.048801 107.7276 32.271301 107.7276 30.2805 c
107.7276 28.526699 106.7796 26.891399 104.8599 26.891399 c
h
W
0 0 180 108 rc
-3.9708557 46.324699 m
115.9271 46.324699 l
115.9271 14.3548 l
-3.9708557 14.3548 l
h
f
Q
0.2 0.2 0.2 sc
q
121.2129 24 m
126.7113 24 127.2801 27.199499 127.2801 28.8111 c
127.2801 31.0152 125.8818 32.650501 123.7014 32.934898 c
123.7014 32.9823 l
125.4552 33.3615 126.6402 34.996799 126.6402 36.7743 c
126.6402 39.926399 124.0569 40.921799 121.2129 40.921799 c
114.0555 40.921799 l
114.0555 24 l
121.2129 24 l
h
121.2129 33.5037 m
115.6671 33.5037 l
115.6671 39.547199 l
121.2129 39.547199 l
123.7488 39.547199 125.0286 38.480701 125.0286 36.371399 c
125.0286 34.783501 123.7725 33.5037 121.2129 33.5037 c
h
121.2129 25.374599 m
115.6671 25.374599 l
115.6671 32.129101 l
121.2129 32.129101 l
124.0569 32.129101 125.6685 31.0389 125.6685 28.8585 c
125.6685 26.109301 123.6066 25.374599 121.2129 25.374599 c
h
133.0155 23.644501 m
135.3855 23.644501 136.4046 24.545099 137.4711 26.132999 c
137.51849 26.132999 l
137.51849 24.8769 137.75549 24 139.27229 24 c
139.6752 24 139.8885 24.023701 140.244 24.094801 c
140.244 25.350901 l
140.07809 25.2798 139.9359 25.2561 139.77 25.2561 c
139.17751 25.2561 138.8931 25.564199 138.8931 26.1567 c
138.8931 32.650501 l
138.8931 35.944801 136.5468 36.584702 134.39011 36.584702 c
131.56979 36.584702 129.60271 35.352299 129.4368 32.4846 c
130.9299 32.4846 l
131.00101 34.475399 132.3282 35.328602 134.2005 35.328602 c
135.978 35.328602 137.39999 34.830898 137.39999 32.816399 c
137.39999 31.489201 136.71271 31.2759 135.4803 31.1574 c
132.2571 30.7782 128.91541 30.636 128.91541 27.2232 c
128.91541 24.7584 130.7403 23.644501 133.0155 23.644501 c
h
133.134 24.9006 m
131.71201 24.9006 130.40849 25.8249 130.40849 27.318001 c
130.40849 29.688 133.56059 29.688 136.0965 30.1383 c
136.4994 30.2094 137.16299 30.3279 137.3526 30.683399 c
137.39999 30.683399 l
137.39999 28.74 l
137.39999 26.3463 135.43291 24.9006 133.134 24.9006 c
h
143.37241 24 m
143.37241 30.5175 l
143.37241 33.077099 145.22099 35.0205 147.92281 34.902 c
147.92281 36.3951 l
145.7187 36.489899 144.05969 35.352299 143.3013 33.3615 c
143.25391 33.3615 l
143.25391 36.229198 l
141.8793 36.229198 l
141.8793 24 l
143.37241 24 l
h
150.83791 24 m
150.83791 30.5175 l
150.83791 33.077099 152.68649 35.0205 155.38831 34.902 c
155.38831 36.3951 l
153.1842 36.489899 151.52521 35.352299 150.7668 33.3615 c
150.71941 33.3615 l
150.71941 36.229198 l
149.3448 36.229198 l
149.3448 24 l
150.83791 24 l
h
158.3271 38.528099 m
158.3271 40.921799 l
156.834 40.921799 l
156.834 38.528099 l
158.3271 38.528099 l
h
158.3271 24 m
158.3271 36.229198 l
156.834 36.229198 l
156.834 24 l
158.3271 24 l
h
166.10069 23.644501 m
169.2054 23.644501 170.7933 25.2561 171.4332 28.028999 c
169.94009 28.028999 l
169.46609 26.1567 168.2811 24.9006 166.10069 24.9006 c
163.2567 24.9006 162.0717 27.5313 162.0717 29.7117 c
171.48061 29.7117 l
171.59911 33.148201 170.0112 36.584702 166.10069 36.584702 c
162.2139 36.584702 160.5786 33.337799 160.5786 30.114599 c
160.5786 26.630699 162.2139 23.644501 166.10069 23.644501 c
h
169.9875 30.9678 m
162.0717 30.9678 l
162.3324 33.195599 163.63589 35.328602 166.10069 35.328602 c
168.4944 35.328602 169.9164 33.219299 169.9875 30.9678 c
h
174.9882 24 m
174.9882 30.5175 l
174.9882 33.077099 176.83681 35.0205 179.5386 34.902 c
179.5386 36.3951 l
177.3345 36.489899 175.67551 35.352299 174.9171 33.3615 c
174.86971 33.3615 l
174.86971 36.229198 l
173.4951 36.229198 l
173.4951 24 l
174.9882 24 l
h
W
0 0 180 108 rc
109.0555 45.921799 m
184.5386 45.921799 l
184.5386 18.644501 l
109.0555 18.644501 l
h
f
Q
0.80000001 0.25490198 0.25490198 sc
q
88.281204 90.559998 m
89.171104 90.41333 89.912689 90.26667 90.802597 90.120003 c
94.065567 89.533333 96.735275 87.773331 99.25666 85.720001 c
101.77805 83.666664 104.00281 81.32 106.22756 79.120003 c
106.96915 78.386665 106.96915 77.506668 106.22756 76.773331 c
105.93092 76.333336 105.48598 76.040001 105.04102 75.599998 c
105.78261 74.866669 106.52419 74.133331 107.41409 73.253334 c
107.56242 73.400002 107.71073 73.693336 107.85905 73.839996 c
108.60063 74.426666 109.34222 74.573334 110.0838 73.839996 c
111.12202 72.813332 112.30856 71.786667 113.34677 70.613335 c
113.94004 70.026665 113.94004 69.146667 113.34677 68.559998 c
111.71529 66.946663 110.0838 65.186668 108.304 63.573334 c
107.71073 62.986668 106.82083 62.986668 106.07924 63.573334 c
105.04102 64.599998 104.00281 65.626663 102.81627 66.653336 c
102.223 67.239998 102.223 67.973335 102.66795 68.706665 c
102.81627 69 103.1129 69.146667 103.26122 69.293335 c
102.51964 70.026665 101.77805 70.760002 100.88815 71.639999 c
100.73983 71.493332 100.4432 71.053337 100.29488 70.90667 c
99.553299 70.173332 98.663391 70.173332 97.773491 70.90667 c
96.142006 72.373337 94.658836 73.986664 93.175667 75.453331 c
93.027351 75.599998 93.027351 75.746666 93.027351 75.893333 c
93.620621 78.386665 93.027351 80.73333 91.840813 83.080002 c
90.950912 84.986664 89.467743 86.306664 87.539619 87.333336 c
85.611504 88.360001 83.535065 89.09333 81.31031 89.68 c
81.90358 89.826668 82.496841 89.973335 83.090111 90.120003 c
83.68338 90.26667 84.276649 90.26667 85.018234 90.41333 c
86.204765 90.559998 87.242989 90.559998 88.281204 90.559998 c
h
W
0 0 180 108 rc
76.31031 95.559998 m
118.79173 95.559998 l
118.79173 58.133335 l
76.31031 58.133335 l
h
f
Q
0.2 0.2 0.2 sc
q
90.010406 73.874367 m
90.791458 74.655418 92.057785 74.655418 92.838837 73.874367 c
96.374367 70.338837 l
97.155418 69.557785 97.155418 68.291458 96.374367 67.510406 c
77.989594 49.125629 l
77.208542 48.344582 75.942215 48.344582 75.161163 49.125629 c
71.625633 52.661163 l
70.844582 53.442215 70.844582 54.708542 71.625633 55.489594 c
90.010406 73.874367 l
h
91.424622 72.460152 m
73.039848 54.075378 l
76.575378 50.539845 l
94.960152 68.924622 l
91.424622 72.460152 l
h
W
0 0 180 108 rc
63.14035 54.075378 m
91.424622 82.35965 l
104.85965 68.924622 l
76.575378 40.64035 l
h
f
Q
0.26666668 0.26666668 0.27058825 sc
q
60.200001 58.299999 m
40 67.599998 l
40 69.699997 l
60.200001 79 l
60.200001 76.800003 l
42.5 68.599998 l
60.200001 60.400002 l
60.200001 58.299999 l
h
W
0 0 180 108 rc
35 84 m
65.199997 84 l
65.199997 53.299999 l
35 53.299999 l
h
f
Q
q
136.8 68.599998 m
119 76.800003 l
119 79 l
139.2 69.699997 l
139.2 67.5 l
119 58.200001 l
119 60.400002 l
136.8 68.599998 l
h
W
0 0 180 108 rc
114 84 m
144.2 84 l
144.2 53.200001 l
114 53.200001 l
h
f
ep
end
%%Trailer
%%EOF
