%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 7.0%%For: (mango ) (the print warehouse)%%Title: (SSW LOGO)%%CreationDate: (10/24/00) (12:47 PM)%%BoundingBox: 227 427 339 516%%HiResBoundingBox: 227.8833 427.6394 338.5381 515.1358%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.1 0%%+ procset Adobe_Illustrator_AI5 1.2 0%%+ procset Adobe_cshow 2.0 8%AI5_FileFormat 3%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%DocumentCustomColors: (PANTONE Red 032 CVU)%%CMYKCustomColor: 0 0.91 0.87 0 (PANTONE Red 032 CVU)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 297.5 420.5 297.5 420.5%AI3_TileBox: -1 1 594 841%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595.2756 841.8898%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 4%AI5_OpenToView: 153.5 579.5 3 818 577 18 0 1 7 41 0 0%AI5_OpenViewLayers: 7777%%PageOrigin:-1 1%%AI3_PaperRect:0 841 595 -1%%AI3_Margin:0 -1 0 1%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 104 8%%BeginData: 8596 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD6BFFFCB5B4B5FCB5B4B5FCFD74FFFCB5FCB5FCB5FCB5FCB5FCB5%FCFD72FFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD6FFFB5FCB5FCB5FCB5FC%B5FCB5FCB5FCB5FCB5FD6EFFB5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FC%B5FD6BFFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD6AFFFCB5%FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FD69FFFCB5FCB5FD08FF%FCB5FCB5FCB5FCB5FCB5FCFD68FFFCB5B4FD0BFFB4B5FCB5B4B5FCB5B4B5%FD67FFFCB5FD0DFFB5FCB5FCB5FCB5FCB5FCF3A8F3A8FD62FFFCB5FD0FFF%B5FCB5FCB5FCB5FCB5FD06F3FD5FFFFCB5FD10FFFCB5FCB5FCB5FCB5FCF3%A8F3A8F3A8F3FD5DFFB4FD12FFB5B4B5FCB5B4B5FCB5FD08F3FD5BFFFCFD%13FFFCB5FCB5FCB5FCB5FCF3A8F3A8F3A8F3A8F3FD59FFFCFD14FFB5FCB5%FCB5FCB5FCB5FD09F3FD58FFFCFD15FFFCB5FCB5FCB5FCB5FCF3A8F3A8F3%A8F3A8F3FD57FFFCFD16FFB5FCB5B4B5FCB5B4B5FD09F3FD56FFFCFD17FF%FCB5FCB5FCB5FCB5FCF3A8F3A8F3A8F3A8F3FD55FFFCFD18FFB5FCB5FCB5%FCB5FCFD0AF3FD54FFFCFD19FFFCB5FCB5FCB5FCB5FFF3A8F3A8F3A8F3A8%F3FD53FFB4FD1AFFB5B4B5FCB5B4B5FCFFFD09F3FD6EFFFCB5FCB5FCB5FC%B5FFF3A8F3A8F3A8F3A8F3FD52FFB5FD1AFFFCB5FCB5FCB5FCB5FFFFFD09%F3FD51FFB5FD1BFFB5FCB5FCB5FCB5FCFFFFF3A8F3A8F3A8F3A8F3FD17FF%FD05F8FD34FFB5FD1CFFB4B5FCB5B4B5FCB5FFFFFD09F3FD10FFFD12F8FD%4BFFB5FCB5FCB5FCB5FCFFFFF3A8F3A8F3A8F3A8F3FD0DFFFD18F8FD47FF%B5FCB5FCB5FCB5FCFFFFFFFD09F3FD0AFFFD1DF8FD0DFFFD09F8FD11FFFC%FD1DFFFCB5FCB5FCB5FCB5FFFFFFF3A8F3A8F3A8F3A8F3FD09FFFD20F8FD%07FFFD10F8FD0DFFFCFD1EFFB5FCB5B4B5FCB5B4FFFFFFFD09F3FD08FFFD%22F8FD04FFFD14F8FFFFFD09F8FD1EFFB5FCB5FCB5FCB5FCFD04FFF3A8F3%A8F3A8F3A8FD08FFFD23F8FFFFFFFD16F8FFFD09F8FD04FFFD07F8FD13FF%FCB5FCB5FCB5FCB5FD04FFFD08F3FD08FFFD24F8FFFD22F8FFFFFFFD08F8%FFFFFFFD06F8FD09FFB5FCB5FCB5FCB5FD05FFF3A8F3A8F3A8F3A8FD07FF%FD12F8FD05FFFD31F8FFFFFFFD08F8FFFFFD07F8FD08FFB5FCB5B4B5FCB5%B4FD05FFFD08F3FD07FFFD11F8FD08FFFD2FF8FFFFFD09F8FFFFFD06F8FF%FFE3E3E7E77DFFFFFCB5FCB5FCB5FCB5FD04FFA8F3A8F3A8F3A8F3FD08FF%FD15F8FD05FFFD04F8FD06FFFD0CF8FD05FFFD13F8FFFFFD09F8FFFD07F8%FD04FFE77D7DEBEBEFFCB5FCB5FCB5FD05FFFD08F3FD08FFFD1BF8FD09FF%FD0FF8FD04FFFD11F8FFFD0AF8FFFD06F8DB5227E3FD04FF7DEBEBEFA8B5%FCB5FCFD05FFA8F3A8F3A8F3A8F3FD08FFFD1FF8FD05FFFD14F8FD07FFFD%09F8FFFD0AF8FFFD06F8DFDF52FFE3E7E7FD06FFA8B5B4FD05FFFD08F3FD%0AFFFD20F8FFFFFFFD17F8FD04FFFD1AF82EDB52FD06FF7DFD05FFA8F3FD%05FFF3A8F3A8F3A8F3A8FD0AFFFD22F8FFFFFD18F8FFFFFD1AF8FD05FFE3%FD04FFEBFD04FFA8A8FD05FFFD08F3FD0BFFFD21F8FFFFFD19F8FFFD17F8%FFFFFF2727DFFF5252E3E3E7E7FFFFFFEBFFFFA8EFFFFFFFA8F3A8F3A8F3%A8F3FD0CFFFD22F8FFFFFD18F8FFFD16F8FFF8FF272752DFFF52E3E3FD07%FFEBFFFFA8EFFFFFFD08F3FD0DFFFD21F8FFFFFD31F8FF272727FF27FFFF%FFE3E3E77DFD07FFEFFFFFA8F3A8F3A8F3A8F3FD0FFFFD1FF8FFFFFFFD30%F8FF2727FFFFFF525252E3E3E7E7FFFF7DFFEBFFFFEBFFFD08F3FD12FFFD%1DF8FD05FFFD2DF8FFD7D7FFFFFF27DFDF5252E3E3FFE3FFE7FFE7FFFFFF%7DF3A8F3A8F3A8F3A8FD16FFFD19F8FD07FFF8FFFD12F8FFFD0BF8FFFD0A%F8FFD3FFD72727FFFF52DF5252E3FFE7FFE7E7FFFF7DFF7DFD07F3FD0FFF%FD08F8FD07FFFD1AF8FD07FFFD0BF8FFFFFD0BF8FFFD0AF8FFFFD3D72727%272EFF52DF52FFE3E3FFE3E7FFFFE7FFE7F3A8F3A8F3A8F3FD07FFFD10F8%FD0CFFFD16F8FD07FFFD0AF8FFFFFD0AF8FFFFFD09F8FFF8D3D7D3FD0427%FFDF52DFFF5252FFE3E3FFE3E7FFE7FD07F3FD07FFFD12F8FD07FFFD2AF8%FFFFFD0AF8FFFFFD08F8FD04FFD3D3D3D7272727FF27FF275252FF52E3FF%FFFFE3E3F3A8F3A8F3A8FD08FFFD42F8FFFFFFFD0AF8FFFFFD07F8FFFD04%F8FFFFD7D727272EFD04FF5252FF52FF52FFFF5252FD07F3FD08FFFD40F8%FD04FFFD09F8FFFFFFFD06F8FFFD06F8D3FFD7D7D705FF272727FD04FF52%DFFFFF52DFF3A8F3A8F3A8F3FD08FFFD25F8FFFD19F8FD05FFFD09F8FFFF%FFFD0EF8D3FFD7D727FFFD042752FFDFDBDFFFFF2752FD08F3FD08FFFD23%F8FFFFFFFD16F8FFFCFD05FFFD08F8FD05FFFD0EF8FFD3D7FFD7D7FD0427%FF272727FFFF27A8F3A8F3A8F3A8F3A8FD09FFFD20F8FD06FFFD13F8FFFF%B4FD07FFF8F8F8FD0CFFB5B4FFFD08F8FFD3FFD7D3D7D72727FF272EFFFF%FF5227FD0AF3FD09FFFD1DF8FD0BFFFD0DF8FD05FFB5FD09FFB5FCB5FCB5%FCB5FCB5FCB5FCB5FCB5FFFD08F8FD04FFD3D3D7D7D7FFFFFF2727FF2727%A8F3A8F3A8F3A8F3A8F3FD0BFFFD18F8FD22FFFCB5FCB5FCB5FCB5FCB5FC%B5FCB5FCB5FCB5FCB5FCB5FCFFFFFD06F8FFFFF8F8FFFFFFD3D7FFFFD727%D727FF27FD0BF3FD0FFFFD0FF8FD11FFB5FCB5FCB5FCB5FCB5FCFFFFFFFC%B5FD04FFFCFFFFB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5%FFFFFFFD05F8FFFD06F8FFD3FFD3D7D3D7D7FFA8F3A8F3A8F3A8F3A8F3A8%F3FD24FFB5B4FFFCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCB5FFFFFFB5B4%B5FCB5B4FD04FFB5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCFF%FFFFFD04F8FFFD08F8FFD3D3D3D7D3D7FD0DF3FD11FFB5FCFFFCB5FCB5FC%B5FCB5FCFFFFFFFCB5FCB5FCB5FCB5FCB5FCFFFCB5FCB5FCB5FCB5FCB5FC%B5FCFFFFFFFCB5FCB5FCB5FD04FFFCB5FCB5FCB5FCB5FCB5FCB5FFB5FCFD%0BFFF8F8FFFD09F8FFF8F8D3F8D3A8F3A8F3A8F3A8F3A8F3A8F3A8F3FD05%FFFCFFFCFFFCB5FCB5FFB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FFFFFFB5FC%B5FCB5FCB5FCB5FFB5FFB5FCB5FCB5FCB5FCB5FCB5FCB5FCFFFFB5FCB5FC%B5FCFD04FFB5FCFD18FFB5FCFD09F8FFFD05F8FD0FF3FD04FFFCB5FCB5FF%B5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFFFFFFFCB5FCB5FCB5FC%B5FFFFFCFFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FFFFFCFFFFFFFCFD1EFFB5%FCB5FCB5FD07F8FFF8F8F8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3FD04%FFB5FCB5B4FFFCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCFFFFB5%FCB5B4B5FCB5B4FFFFB5FFB5FCFD12FFB5FD1DFFB5B4B5FCB5B4B5FCB5FD%04F8FFFD14F3FD04FFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FC%B5FCB5FCB5FFFFFFB5FD1EFFFCFD1DFFFCB5FCB5FCB5FCB5A8F3A8F3A8F3%A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3FD04FFB5FCB5FCB5FCB5%FCFFFCB5FCB5FCFFFCB5FD2AFFFCFD1DFFFCB5FCB5FCB5FCB5FCFD19F3FD%05FFFCB5FD39FFB5FD1CFFFCB5FCB5FCB5FCB5FCFFFFF3A8F3A8F3A8F3A8%F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8FD40FFFCFD1BFFFCB5B4B5FCB5B4%B5FCFFFFFFFD17F3FD40FFFCB5FD1AFFFCB5FCB5FCB5FCB5FCFD05FFA8F3%A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8FD41FFB5FD1BFFB5FCB5FC%B5FCB5FCB5FD06FFFD13F3FD42FFFCFD1AFFB5FCB5FCB5FCB5FCB5FD08FF%A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8FD42FFFCB5FD19FFB5FCB5B4B5%FCB5B4B5FD08FFFD11F3FD43FFB5FCFD18FFB5FCB5FCB5FCB5FCB5FD08FF%A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3FD45FFFCB5FD17FFB5FCB5FCB5FC%B5FCB5FCFD07FFFD09F3FD4DFFB5FCFD16FFB5FCB5FCB5FCB5FCB5FCFD08%FFF3A8F3A8F3A8F3A8FD4DFFB5B4B5FD15FFB5B4B5FCB5B4B5FCB5B4FD08%FFFD09F3FD4DFFFCB5FCFD14FFB5FCB5FCB5FCB5FCB5FCFD08FFF3A8F3A8%F3A8F3A8F3FD4EFFB5FCB5FD13FFB5FCB5FCB5FCB5FCB5FCFD08FFFD09F3%FD4FFFFCB5FCFD12FFB5FCB5FCB5FCB5FCB5FCFD08FFF3A8F3A8F3A8F3A8%F3A8FD4FFFB5FCB5FD11FFB5FCB5B4B5FCB5B4B5FCFD09FFFD09F3FD50FF%FCB5FCFD0FFFFCB5FCB5FCB5FCB5FCB5FCB5FD08FFA8F3A8F3A8F3A8F3A8%FD50FFFCB5FCB5FD0EFFFCB5FCB5FCB5FCB5FCB5FCB5FD08FFFD09F3FD51%FFB5FCB5FCB5FD0BFFB5FCB5FCB5FCB5FCB5FCB5FCB5FD08FFA8F3A8F3A8%F3A8F3A8FD52FFFCB5B4B5FCB5FD08FFB4B5FCB5B4B5FCB5B4B5FCB5B4B5%FD08FFFD0AF3FD52FFB5FCB5FCB5FCB5FCFFFFFFFCB5FCB5FCB5FCB5FCB5%FCB5FCB5FCB5FD08FFA8F3A8F3A8F3A8F3A8F3FD53FFFCB5FCB5FCB5FCB5%FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD09FFFD0AF3FD54FFB5FCB5FC%B5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD09FFA8F3A8F3A8F3A8%F3A8F3FD56FFB5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCB5B4B5FCFD09%FFFD0AF3FD57FFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD09%FFA8F3A8F3A8F3A8F3A8F3FD58FFB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FC%B5FCB5FCFD08FFFD0BF3FD59FFFCB5FCB5FCB5FCB5FCB5FCB5FCB5FCB5FC%B5FD09FFF3A8F3A8F3A8F3A8F3A8F3A8FD5AFFB4B5FCB5B4B5FCB5B4B5FC%B5B4B5FCB5FD09FFFD0CF3FD5BFFB5FCB5FCB5FCB5FCB5FCB5FCB5FCFD09%FFA8F3A8F3A8F3A8F3A8F3A8F3A8FD5DFFB5FCB5FCB5FCB5FCB5FCB5F3FD%08FFFD0EF3FD60FFFCB5FCB5FCB5A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3%A8F3A8F3A8F3A8F3A8FD66FFFD18F3FD68FFF3A8F3A8F3A8F3A8F3A8F3A8%F3A8F3A8F3A8F3A8F3A8F3FD69FFFD16F3FD6AFFF3A8F3A8F3A8F3A8F3A8%F3A8F3A8F3A8F3A8F3A8F3FD6BFFFD14F3FD6DFFA8F3A8F3A8F3A8F3A8F3%A8F3A8F3A8F3A8FD6FFFFD10F3FD71FFF3A8F3A8F3A8F3A8F3A8F3A8F3FD%74FFFD0AF3FD78FFA8F3A8F3A8FDFCFFFD38FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 25 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			0			6 packedarray		} bind def		/findrgbcustomcolor		{			1			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop 			0 eq			{				pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				pop				3				{					1 exch sub					3 index mul 					1 exch sub					3 1 roll				} repeat				4 -1 roll pop				setrgbcolor			} ifelse		}		def	} if		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			currentoverprint{				rectImage			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					] /DeviceCMYK {}				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					false					currentpagedevice/SeparationOrder get{name eq or}forall					not				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse}def/initializeMultiPassSeps{	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	pt	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 200 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						_inRipSep currentoverprint not and or and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		pop	}{		/_useShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentoverprint where{		pop	}{		/currentoverprint {			false		}def	}ifelse	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			/Function 				bd					/FunctionType 3					/Domain [0 1]					/Functions _rampFuncsArray					/Bounds _boundsArray					/Encode _encodeArray				ed			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			_rampFuncsArray _index		bd			/FunctionType 2			/Domain [0 1]			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div			_gradType 0 eq{				_invert{/C1}{/C0}ifelse _C0				_invert{/C0}{/C1}ifelse _C1			}{				_invert{/C0}{/C1}ifelse _C1				_invert{/C1}{/C0}ifelse _C0			}ifelse		ed		put				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			setrgbcolor 4 npop		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			3 -1 roll pop pop			1 exch sub /_tmp xp			3{				1 exch sub _tmp mul 1 exch sub 3 1 roll			}repeat			setrgbcolor 			4 npop		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _usingSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_firstShell true pt	_enabledSmoothShade not{		fill	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{			radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt		_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			true		_producingSeps{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_useShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_useShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_useShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_useShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 24 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 15 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null def	/XIVersion 6 defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null defcurrentdict /_colorimage known not{	/colorimage where	{		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def/WalkRGBString{	0 3 index	dup length 1 sub 0 3 3 -1 roll	{		3 getinterval { } forall		5 index exec		3 index	} for		 5 { pop } repeat} def/WalkCMYKString{	0 3 index	dup length 1 sub 0 4 3 -1 roll	{		4 getinterval { } forall				6 index exec				3 index			} for		5 { pop } repeat	} def/StuffRGBIntoGrayString{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		dup length 3 idiv string		dup 3 1 roll 				/StuffRGBIntoGrayString load exch		WalkRGBString end} def/StuffCMYKIntoGrayString{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		dup length 4 idiv string		dup 3 1 roll 				/StuffCMYKIntoGrayString load exch		WalkCMYKString end} def/ColorImageCompositeEmulator{	pop true eq	{		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				sourcearray 0 3 -1 roll put							channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load		 end		} if		image	} ifelse} def/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			sourcearray plateindex get exec		}		{						sourcearray 0 get exec						dup length 4 idiv string						0 2 index						plateindex 4 2 index length 1 sub			{				get 255 exch sub								3 copy put pop 1 add								2 index			} for			pop pop exch pop		} ifelse end} def	/FourEqual{	4 index ne	{		pop pop pop false	}	{		4 index ne		{			pop pop false		}		{			4 index ne			{				pop false			}			{				4 index eq			} ifelse		} ifelse	} ifelse} def/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		4 sourcecount add index dup 		8 eq exch 1 eq or not end		{		/_colorimage load null ne		{			_colorimage		}		{			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				dup 1 eq				{					pop pop image				}				{					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			dup 1 eq			{				pop pop				image			}			{				pop pop				Adobe_ColorImage_AI6_Vars begin					sourcecount -1 0					{									exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load			 end				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def/XG{	pop pop} def/XF{	13 {pop} repeat} def/Xh{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			/_lp /null ddef			_fc			/_lp /imagemask ddef		}		if		/XIVersion 7 def end} def/XH{	Adobe_ColorImage_AI6_Vars begin		/XIVersion 6 def		grestore end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def		XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			XIVersion 6 le			{				currentfile 128 string readline pop pop			}			if		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				XIVersion 6 le		{			0 0 moveto			XIImageMatrix concat			XIImageWidth XIImageHeight scale			XIMask			{				/_lp /null ddef				_fc				/_lp /imagemask ddef			} if		} if				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load			imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						XIChannelCount 1 eq			{				gsave				0 setgray				image				grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)%%Version: 1.2 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 107 dict dup beginput/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XA{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/_rgbtocmyk{3	{	1 exch sub 3 1 roll	} repeat3 copy 1 4 1 roll3	{	3 index 2 copy gt		{		exch		} if	pop 4 1 roll	} repeatpop pop pop4 1 roll3	{	3 index sub	3 1 roll	} repeat4 -1 roll} def/Xx{	exch	/_gf exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq	{		findcmykcustomcolor	}	{		/findrgbcustomcolor where not {			4 1 roll _rgbtocmyk			5 -1 roll			findcmykcustomcolor		}		{			pop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer readline not		{		stop		} if		endString eq		{			cleartomark stop		} if	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer readline not		{		stop		} if		dup beginString eq		{			pop /layerCnt dup load 1 add store		}		{			endString eq			{				layerCnt 1 eq				{					cleartomark stop				}				{					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popendendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execuserdict begin /_useSmoothShade true def endAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Azure Rings)(Azure Rings) 22.5 22.5 58.5 58.5 [%AI3_Tile(0 O 0 R  0.9569 0.9294 0 0 k 0.9569 0.9294 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1.75 w 4 M []0 d%AI3_Note:0 D0 XR40.5 58.5 m40.5 48.5586 32.4409 40.5 22.5 40.5 c12.5591 40.5 4.5 48.5586 4.5 58.5 c4.5 68.4414 12.5591 76.5 22.5 76.5 c32.4409 76.5 40.5 68.4414 40.5 58.5 cs40.5 22.5 m40.5 12.5586 32.4409 4.5 22.5 4.5 c12.5591 4.5 4.5 12.5586 4.5 22.5 c4.5 32.4414 12.5591 40.5 22.5 40.5 c32.4409 40.5 40.5 32.4414 40.5 22.5 cs40.5 40.5 m40.5 30.5586 32.4409 22.5 22.5 22.5 c12.5591 22.5 4.5 30.5586 4.5 40.5 c4.5 50.4414 12.5591 58.5 22.5 58.5 c32.4409 58.5 40.5 50.4414 40.5 40.5 cs58.5 58.5 m58.5 48.5586 50.4409 40.5 40.5 40.5 c30.5591 40.5 22.5 48.5586 22.5 58.5 c22.5 68.4414 30.5591 76.5 40.5 76.5 c50.4409 76.5 58.5 68.4414 58.5 58.5 cs58.5 22.5 m58.5 12.5586 50.4409 4.5 40.5 4.5 c30.5591 4.5 22.5 12.5586 22.5 22.5 c22.5 32.4414 30.5591 40.5 40.5 40.5 c50.4409 40.5 58.5 32.4414 58.5 22.5 cs58.5 40.5 m58.5 30.5586 50.4409 22.5 40.5 22.5 c30.5591 22.5 22.5 30.5586 22.5 40.5 c22.5 50.4414 30.5591 58.5 40.5 58.5 c50.4409 58.5 58.5 50.4414 58.5 40.5 cs76.5 58.5 m76.5 48.5586 68.4409 40.5 58.5 40.5 c48.5591 40.5 40.5 48.5586 40.5 58.5 c40.5 68.4414 48.5591 76.5 58.5 76.5 c68.4409 76.5 76.5 68.4414 76.5 58.5 cs76.5 22.5 m76.5 12.5586 68.4409 4.5 58.5 4.5 c48.5591 4.5 40.5 12.5586 40.5 22.5 c40.5 32.4414 48.5591 40.5 58.5 40.5 c68.4409 40.5 76.5 32.4414 76.5 22.5 cs76.5 40.5 m76.5 30.5586 68.4409 22.5 58.5 22.5 c48.5591 22.5 40.5 30.5586 40.5 40.5 c40.5 50.4414 48.5591 58.5 58.5 58.5 c68.4409 58.5 76.5 50.4414 76.5 40.5 cs%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Camouflage)(Camouflage) 1 1 73 73 [%AI3_Tile(0 O 0 R  0.5961 0.1412 0.949 0.0275 k 0.5961 0.1412 0.949 0.0275 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR1 73 m1 1 L73 1 L73 73 L1 73 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.498 0.349 0.9725 0.2 k 0.498 0.349 0.9725 0.2 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR18.5449 73 m18.5449 1 L46.7832 1 L46.7832 73 L18.5449 73 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.1882 0.1098 0.9255 0.0157 k 0.1882 0.1098 0.9255 0.0157 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR11.9512 1 m11.9512 4.7129 9.2314 2.8813 9.2314 6.5938 c9.2314 10.2334 4.25 10.2334 4.25 13.8735 c4.25 17.4858 10.0313 17.4858 10.0313 21.0991 c10.0313 24.832 10.208 24.832 10.208 28.5654 c10.208 32.3071 5.5205 32.3071 5.5205 36.0469 c5.5205 39.7021 11.8838 39.7021 11.8838 43.356 c11.8838 47.0566 7.4609 47.0566 7.4609 50.7568 c7.4609 54.4043 5.7959 54.4043 5.7959 58.0542 c5.7959 61.7686 4.6631 61.7686 4.6631 65.4805 c4.6631 69.1636 11.9512 69.3184 11.9512 73 C27.9268 73 L27.9268 69.3184 22.0635 69.1636 22.0635 65.4805 c22.0635 61.7686 28.6631 61.7686 28.6631 58.0542 c28.6631 54.4043 25.1553 54.4043 25.1553 50.7568 c25.1553 47.0566 28.8145 47.0566 28.8145 43.356 c28.8145 39.7021 22.1191 39.7021 22.1191 36.0469 c22.1191 32.3071 26.3945 32.3071 26.3945 28.5654 c26.3945 24.832 24.4248 24.832 24.4248 21.0991 c24.4248 17.4858 20.3838 17.4858 20.3838 13.8735 c20.3838 10.2334 24.6055 10.2334 24.6055 6.5938 c24.6055 2.8813 27.9268 4.7129 27.9268 1 C11.9512 1 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.9255 0.2157 0.9647 0.0745 k 0.9255 0.2157 0.9647 0.0745 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR41.875 1 m41.875 4.7134 42.3867 2.8818 42.3867 6.5938 c42.3867 10.2334 40.5947 10.2334 40.5947 13.8735 c40.5947 17.4858 41.5742 17.4858 41.5742 21.0991 c41.5742 24.832 43.6484 24.832 43.6484 28.5659 c43.6484 32.3076 39.1709 32.3076 39.1709 36.0469 c39.1709 39.7026 39.7549 39.7026 39.7549 43.356 c39.7549 47.0566 45.3896 47.0566 45.3896 50.7568 c45.3896 54.4043 40.1055 54.4043 40.1055 58.0542 c40.1055 61.7686 40.6289 61.7686 40.6289 65.4805 c40.6289 69.1636 41.875 69.3184 41.875 73 C59.0752 73 L59.0752 69.4219 53.4805 70.1934 53.4805 66.6143 c53.4805 62.9136 55.8945 62.9136 55.8945 59.2153 c55.8945 55.502 61.0059 55.502 61.0059 51.7886 c61.0059 48.1489 60.5635 48.1489 60.5635 44.5103 c60.5635 40.897 59.9277 40.897 59.9277 37.2842 c59.9277 33.5508 56.3662 33.5508 56.3662 29.8169 c56.3662 26.0762 61.0908 26.0762 61.0908 22.3354 c61.0908 18.6812 52.6025 18.6812 52.6025 15.0264 c52.6025 11.3262 55.7461 11.3262 55.7461 7.6265 c55.7461 3.978 59.0752 4.6484 59.0752 1 C41.875 1 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Clown Attack)(Clown Attack) 5.25 11 41.25 47 [%AI3_Tile(0 O 0 R  0.9255 0 1 0 k 0.9255 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR17.5 18.25 m17.5 15.2119 15.0376 12.75 12 12.75 c8.9624 12.75 6.5 15.2119 6.5 18.25 c6.5 21.2881 8.9624 23.75 12 23.75 c15.0376 23.75 17.5 21.2881 17.5 18.25 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0078 0.9529 0 0 k 0.0078 0.9529 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR22.25 34.125 m22.25 31.2939 19.9556 29 17.125 29 c14.2944 29 12 31.2939 12 34.125 c12 36.9561 14.2944 39.25 17.125 39.25 c19.9556 39.25 22.25 36.9561 22.25 34.125 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0118 0.9608 0.9137 0 k 0.0118 0.9608 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR30 31.625 m30 29.4854 28.2646 27.75 26.125 27.75 c23.9849 27.75 22.25 29.4854 22.25 31.625 c22.25 33.7646 23.9849 35.5 26.125 35.5 c28.2646 35.5 30 33.7646 30 31.625 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0314 0.0196 0.9137 0 k 0.0314 0.0196 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR23.25 24.5 m23.25 22.4287 21.5713 20.75 19.5 20.75 c17.4287 20.75 15.75 22.4287 15.75 24.5 c15.75 26.5713 17.4287 28.25 19.5 28.25 c21.5713 28.25 23.25 26.5713 23.25 24.5 cf%AI6_EndPatternLayer) &(0 O 0 R  0.9569 0.9294 0 0 k 0.9569 0.9294 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR36 22.25 m36 19.0742 33.4258 16.5 30.25 16.5 c27.0742 16.5 24.5 19.0742 24.5 22.25 c24.5 25.4258 27.0742 28 30.25 28 c33.4258 28 36 25.4258 36 22.25 cf%AI6_EndPatternLayer) &(0 O 0 R  0.1882 0.1216 0.8 0.0157 k 0.1882 0.1216 0.8 0.0157 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR24.25 16.5 m24.25 14.8438 22.9067 13.5 21.25 13.5 c19.5933 13.5 18.25 14.8438 18.25 16.5 c18.25 18.1563 19.5933 19.5 21.25 19.5 c22.9067 19.5 24.25 18.1563 24.25 16.5 cf%AI6_EndPatternLayer) &(0 O 0 R  0.8353 0 0 0 k 0.8353 0 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR37.25 43.875 m37.25 39.5264 33.7236 36 29.375 36 c25.0264 36 21.5 39.5264 21.5 43.875 c21.5 48.2236 25.0264 51.75 29.375 51.75 c33.7236 51.75 37.25 48.2236 37.25 43.875 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0078 0.1961 0.9373 0 k 0.0078 0.1961 0.9373 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR38.75 26.625 m38.75 25.7275 38.0225 25 37.125 25 c36.2275 25 35.5 25.7275 35.5 26.625 c35.5 27.5225 36.2275 28.25 37.125 28.25 c38.0225 28.25 38.75 27.5225 38.75 26.625 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0196 0.5961 0.9137 0 k 0.0196 0.5961 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR19.875 42 m19.875 41.1025 19.1475 40.375 18.25 40.375 c17.3525 40.375 16.625 41.1025 16.625 42 c16.625 42.8975 17.3525 43.625 18.25 43.625 c19.1475 43.625 19.875 42.8975 19.875 42 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0118 0.9608 0.9137 0 k 0.0118 0.9608 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR12.75 28.125 m12.75 26.8135 11.6865 25.75 10.375 25.75 c9.0635 25.75 8 26.8135 8 28.125 c8 29.4365 9.0635 30.5 10.375 30.5 c11.6865 30.5 12.75 29.4365 12.75 28.125 cf%AI6_EndPatternLayer) &(0 O 0 R  0.9255 0 1 0 k 0.9255 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR43.25 33 m43.25 30.998 41.627 29.375 39.625 29.375 c37.623 29.375 36 30.998 36 33 c36 35.002 37.623 36.625 39.625 36.625 c41.627 36.625 43.25 35.002 43.25 33 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0314 0.0196 0.9137 0 k 0.0314 0.0196 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR13.25 43.75 m13.25 40.9883 11.0117 38.75 8.25 38.75 c5.4883 38.75 3.25 40.9883 3.25 43.75 c3.25 46.5117 5.4883 48.75 8.25 48.75 c11.0117 48.75 13.25 46.5117 13.25 43.75 cf%AI6_EndPatternLayer) &(0 O 0 R  0.3922 0.9451 0 0 k 0.3922 0.9451 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR6.5 22.25 m6.5 20.7314 5.2686 19.5 3.75 19.5 c2.2314 19.5 1 20.7314 1 22.25 c1 23.7686 2.2314 25 3.75 25 c5.2686 25 6.5 23.7686 6.5 22.25 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0235 0.0118 0.6 0 k 0.0235 0.0118 0.6 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR34.4883 32.75 m34.4883 31.9277 33.8223 31.2617 33 31.2617 c32.1777 31.2617 31.5117 31.9277 31.5117 32.75 c31.5117 33.5723 32.1777 34.2383 33 34.2383 c33.8223 34.2383 34.4883 33.5723 34.4883 32.75 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0314 0.0196 0.9137 0 k 0.0314 0.0196 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR49.25 43.75 m49.25 40.9883 47.0117 38.75 44.25 38.75 c41.4883 38.75 39.25 40.9883 39.25 43.75 c39.25 46.5117 41.4883 48.75 44.25 48.75 c47.0117 48.75 49.25 46.5117 49.25 43.75 cf%AI6_EndPatternLayer) &(0 O 0 R  0.3922 0.9451 0 0 k 0.3922 0.9451 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR42.5 22.25 m42.5 20.7314 41.2686 19.5 39.75 19.5 c38.2314 19.5 37 20.7314 37 22.25 c37 23.7686 38.2314 25 39.75 25 c41.2686 25 42.5 23.7686 42.5 22.25 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0314 0.0196 0.9137 0 k 0.0314 0.0196 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR49.25 7.752 m49.25 4.9902 47.0117 2.752 44.25 2.752 c41.4883 2.752 39.25 4.9902 39.25 7.752 c39.25 10.5137 41.4883 12.752 44.25 12.752 c47.0117 12.752 49.25 10.5137 49.25 7.752 cf%AI6_EndPatternLayer) &(0 O 0 R  0.8353 0 0 0 k 0.8353 0 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR37.25 7.875 m37.25 3.5264 33.7236 0 29.375 0 c25.0264 0 21.5 3.5264 21.5 7.875 c21.5 12.2236 25.0264 15.75 29.375 15.75 c33.7236 15.75 37.25 12.2236 37.25 7.875 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0314 0.0196 0.9137 0 k 0.0314 0.0196 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR13.25 7.75 m13.25 4.9883 11.0117 2.75 8.25 2.75 c5.4883 2.75 3.25 4.9883 3.25 7.75 c3.25 10.5117 5.4883 12.75 8.25 12.75 c11.0117 12.75 13.25 10.5117 13.25 7.75 cf%AI6_EndPatternLayer) &(0 O 0 R  0.9255 0 1 0 k 0.9255 0 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR7.25 33 m7.25 30.998 5.627 29.375 3.625 29.375 c1.623 29.375 0 30.998 0 33 c0 35.002 1.623 36.625 3.625 36.625 c5.627 36.625 7.25 35.002 7.25 33 cf%AI6_EndPatternLayer) &(0 O 0 R  0.0235 0.4078 0 0 k 0.0235 0.4078 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR39.6533 16.0381 m39.6533 15.1064 38.8975 14.3506 37.9658 14.3506 c37.0342 14.3506 36.2783 15.1064 36.2783 16.0381 c36.2783 16.9697 37.0342 17.7256 37.9658 17.7256 c38.8975 17.7256 39.6533 16.9697 39.6533 16.0381 cf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Pyramids)(Pyramids) 1 1 19.5 19.5 [%AI3_Tile(0 O 0 R  0.1882 0.1294 0.102 0.0118 k 0.1882 0.1294 0.102 0.0118 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR1 19.5 m10.25 10.25 l19.5 19.5 l1 19.5 lf%AI6_EndPatternLayer) &(0 O 0 R  0.6235 0.4863 0.4863 0.4784 k 0.6235 0.4863 0.4863 0.4784 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR19.5 1 m10.25 10.25 l1 1 l19.5 1 lf%AI6_EndPatternLayer) &(0 O 0 R  0.3529 0.2549 0.2235 0.0667 k 0.3529 0.2549 0.2235 0.0667 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR1 1 m10.25 10.25 l1 19.5 l1 1 lf%AI6_EndPatternLayer) &(0 O 0 R  0.4902 0.3647 0.3451 0.2196 k 0.4902 0.3647 0.3451 0.2196 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR19.5 19.5 m10.25 10.25 l19.5 1 l19.5 19.5 lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Red Stripe)(Red Stripe) 37 19 73 55 [%AI3_Tile(0 O 0 R  0 0.9608 0.9137 0 k 0 0.9608 0.9137 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 18 w 4 M []0 d%AI3_Note:0 D0 XR37 37 m73 37 lS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI3_BeginPattern: (Red Tablecloth)(Red Tablecloth) 0 0 24 24 [%AI3_Tile(0 O 0 R  0.25 1 1 0 k 0.25 1 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR6 18 m0 18 L0 24 L6 24 L6 18 Lf18 18 m12 18 L12 24 L18 24 L18 18 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.1225 0.5 0.5 0 k 0.1225 0.5 0.5 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR12 18 m6 18 L6 24 L12 24 L12 18 Lf24 18 m18 18 L18 24 L24 24 L24 18 Lf%AI6_EndPatternLayer) &(0 O 0 R  0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR12 12 m6 12 L6 18 L12 18 L12 12 Lf24 12 m18 12 L18 18 L24 18 L24 12 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.1225 0.5 0.5 0 k 0.1225 0.5 0.5 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR6 12 m0 12 L0 18 L6 18 L6 12 Lf18 12 m12 12 L12 18 L18 18 L18 12 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.25 1 1 0 k 0.25 1 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR6 6 m0 6 L0 12 L6 12 L6 6 Lf18 6 m12 6 L12 12 L18 12 L18 6 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.1225 0.5 0.5 0 k 0.1225 0.5 0.5 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR12 6 m6 6 L6 12 L12 12 L12 6 Lf24 6 m18 6 L18 12 L24 12 L24 6 Lf%AI6_EndPatternLayer) &(0 O 0 R  0 0 0 0 k 0 0 0 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR12 0 m6 0 L6 6 L12 6 L12 0 Lf24 0 m18 0 L18 6 L24 6 L24 0 Lf%AI6_EndPatternLayer) &(0 O 0 R  0.1225 0.5 0.5 0 k 0.1225 0.5 0.5 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR6 0 m0 0 L0 6 L6 6 L6 0 Lf18 0 m12 0 L12 6 L18 6 L18 0 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_Bs0 0 50 100 %_BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp6 Bn%AI5_BeginGradient: (Black, White Radial)(Black, White Radial) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 0 1 50 0 %_Bs0 0 0 1 1 50 100 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Emerald Eye)(Emerald Eye) 1 3 Bd[<E4E4E4E4E5E5E5E5E5E5E5E5E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0><7675737271706E6D6C6B6A68676665646361605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4948474646454443424141403F3E3D3C3C3B3A39393837363635343433323131302F2F2E2E2D2C2C2B2A2A292928282726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1B1A1A19191818181717171616151515141414131313121212111111101010100F0F0F0E0E0E0E0D0D0D0D0C0C0C0C0B0B0B0B0B0A0A0A0A0A0909090909080808080808070707070707060606060606060505050505050505040404040404040404040303030303030303030303030202020202020202020202020202020201010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF><9896959391908E8D8B8A8886858382807F7E7C7B79787675747271706E6D6C6A69686765646362615F5E5D5C5B5A5957565554535251504F4E4D4C4B4A49484746454443424241403F3E3D3C3C3B3A393837373635343433323131302F2F2E2D2D2C2B2B2A2929282727262625242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A1919181818171716161615151414141313131212121111111010100F0F0F0F0E0E0E0D0D0D0D0C0C0C0C0B0B0B0B0A0A0A0A0A0909090909080808080807070707070706060606060605050505050505050404040404040404040303030303030303030303020202020202020202020202020202020101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>1 %_Br<F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEDEDEDEDECECECECEBEBEBEAEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDBDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C8C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0BFBFBEBEBDBCBCBBBBBAB9B9B8B8B7B6B6B5B5B4B3B3B2B1B1B0B0AFAEAEADACACABAAAAA9A8A8A7A6A6A5A4A4A3A2A2A1A0A09F9E9E9D9C9C9B9A9A99989797969595949393929190908F8E8E8D8C8B8B8A89888887868685848383828180807F7E7D7D7C7B7A7A797877767675747373727170706F6E6D6C6C6B6A696868676665646463626160605F5E5D5C5C5B5A5958575756555453535251504F4E4E4D4C4B4A4948484746454443434241403F3E3D3C3C3B3A39383736363534333231302F2F2E2D2C2B2A29282727262524232221201F1E1E1D1C1B1A19181716151414131211100F0E0D0C0B0A0908080706050403020100>0<FFFFFFFFFFFEFEFEFEFEFDFDFDFDFDFCFCFCFCFBFBFBFAFAFAF9F9F9F8F8F8F7F7F7F6F6F6F5F5F4F4F4F3F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECECEBEBEAEAE9E9E8E8E7E7E6E6E5E5E4E4E3E3E2E2E1E1E0E0DFDEDEDDDDDCDCDBDBDADAD9D8D8D7D7D6D6D5D4D4D3D3D2D1D1D0D0CFCECECDCDCCCBCBCAC9C9C8C8C7C6C6C5C4C4C3C2C2C1C0C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A999998979696959493939291908F8F8E8D8C8C8B8A898888878685848483828180807F7E7D7C7B7B7A7978777676757473727171706F6E6D6C6C6B6A6968676666656463626160605F5E5D5C5B5A5959585756555453525151504F4E4D4C4B4A49484847464544434241403F3E3E3D3C3B3A39383736353433323130302F2E2D2C2B2A292827262524232221201F1E1D1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[0.8941 0.4627 0.9608 0.5961 1 16.2162 28.6517 %_Bs0.9412 0 1 0 1 61.5385 64.6067 %_Bs0 0 0 0 1 50 78.6517 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<F9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302>0.9882<0505050505050505050505050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707080808080808080808080808080808080808080808080808080808080808080808080808080808080808>01 %_Br<E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9><1415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFC><0909090909090909090909090909090909090909090909090909090909080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070706060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606050505050505050505050505050505050505050505050505050505050505>01 %_Br<ECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8><131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09>01 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBEC><05050505050505050506060606060606060606060606060606070707070707070707070707070707070808080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010101010101111111111111111111111111111111112121212121212121212121212121212131313131313131313><E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF>01 %_Br<03030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808><F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605>0.913701 %_Br[0.0078 0.9882 0.0314 0 1 50 100 %_Bs0.9765 0.9882 0.0196 0 1 50 80 %_Bs0.9098 0.0784 0.0353 0 1 50 60 %_Bs0.9255 0.0745 0.9373 0 1 50 40 %_Bs0.0314 0.0196 0.9137 0 1 50 20 %_Bs0.0118 0.9608 0.9137 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar II)(Steel Bar II) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A>0 %_Br<1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0.1 0 50 100 %_Bs1 0 50 39.8876 %_Bs0.1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Sunset)(Sunset) 0 5 Bd[<EEEDEDECECEBEBEAE9E9E8E8E7E6E6E5E5E4E4E3E2E2E1E1E0DFDFDEDEDDDDDCDBDBDADAD9D9D8D7D7D6D6D5D4D4D3D3D2D2D1><3534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403>1<807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160605F5E5D5C5B5A595857565554535251504F>1 %_Br<08090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><050505060606060607070707080808080809090909090A0A0A0A0A0B0B0B0B0B0C0C0C0C0D0D0D0D0D0E0E0E0E0E0F0F0F0F0F1010101010111111111212121212131313131314141414141515151515161616161717171717181818181819191919191A1A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F20202020212121212122222222222323232323242424242525252525262626262627272727272828282828292929292A2A2A2A2A2B2B2B2B2B2C2C2C2C2C2D2D2D2D2D2E2E2E2E2F2F2F2F2F303030303031313131313232323232333333333434343434353535><E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFF><0001010202030304040506060707080809090A0B0B0C0C0D0D0E0E0F1010111112121313141515161617171818191A1A1B1B1C1C1D1D1E1E1F2020212122222323242525262627272828292A2A2B2B2C2C2D2D2E2F2F3030313132323334343535363637373839393A3A3B3B3C3C3D3E3E3F3F4040414142434344444545464647484849494A4A4B4B4C4D4D4E4E4F4F5050515152535354545555565657585859595A5A5B5B5C5D5D5E5E5F5F6060616262636364646565666767686869696A6A6B6C6C6D6D6E6E6F6F7071717272737374747576767777787879797A7B7B7C7C7D7D7E7E7F80>1 %_Br<33333232323231313131303030302F2F2F2E2E2E2E2D2D2D2D2C2C2C2C2B2B2B2B2A2A2A29292929282828282727272726262625252525242424242323232322222221212121202020201F1F1F1F1E1E1E1E1D1D1D1C1C1C1C1B1B1B1B1A1A1A1A191919181818181717171716161616151515141414141313131312121212111111111010100F0F0F0F0E0E0E0E0D0D0D0D0C0C0C0B0B0B0B0A0A0A0A090909090808><A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605><F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9><1111111111101010101010101010100F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A09090909090909090909080808080808080808070707070707070707070606060606060606060505050505050505050504040404040404040403030303030303030303020202020202020202010101010101010101010000000000>1 %_Br<F6F5F4F4F3F2F1F0F0EFEEEDECECEBEAE9E8E8E7E6E5E4E4E3E2E1E1E0DFDEDDDDDCDBDAD9D9D8D7D6D6D5D4D3D2D2D1D0CFCFCECDCCCBCBCAC9C8C8C7C6C5C4C4C3C2C1C1C0BFBEBEBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A5A5A4A3A2A2A1A09F9F9E9D9C9C9B9A9A999897979695949493929291908F8F8E8D8C8C8B8A8A89888787868585848382828180807F7E7E7D7C7B7B7A7979787777767574747372727170706F6E6E6D6C6C6B6A6A6968686766666564646362626160605F5E5E5D5C5C5B5A5A595858575756555554535352525150504F4E4E4D4D4C4B4B4A4A49484847474646454444434342424140403F3F3E3E3D3D3C3C3B3B3A39393938383737363635353434343333><EAEAE9E9E9E9E8E8E8E8E7E7E7E6E6E6E6E5E5E5E5E4E4E4E3E3E3E3E2E2E2E2E1E1E1E0E0E0E0DFDFDFDFDEDEDEDDDDDDDDDCDCDCDCDBDBDBDBDADADAD9D9D9D9D8D8D8D8D7D7D7D7D6D6D6D6D5D5D5D4D4D4D4D3D3D3D3D2D2D2D2D1D1D1D1D0D0D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBDBCBCBCBCBBBBBBBBBABABABABAB9B9B9B9B8B8B8B8B7B7B7B7B7B6B6B6B6B5B5B5B5B5B4B4B4B4B3B3B3B3B3B2B2B2B2B1B1B1B1B1B0B0B0B0B0AFAFAFAFAFAEAEAEAEAEADADADADADACACACACACABABABABABAAAAAAAAAAAAA9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F20212223242526272728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243434445464748494A4B4C4D4E4F50515253545556565758595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F70707172737475767778797A7A7B7C7D7E7F80818283848485868788898A8B8C8C8D8E8F90919293949495969798999A9A9B9C9D9E9FA0A1A1A2A3A4A5A6A7A7A8A9AAABACACADAEAFB0B1B2B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFBFC0C1C2C3C3C4C5C6C7C7C8C9CACBCBCCCDCECECFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDDDDDEDFDFE0E1E2E2E3E4E4E5E6E6E7E8E8E9EAEAEBECECEDEDEEEFEFF0F0F1F1F2F2F3F3><00000000000000000101010101010101010101010101020202020202020202020202020202030303030303030303030303030304040404040404040404040404040405050505050505050505050505050506060606060606060606060606060607070707070707070707070707070707080808080808080808080808080808090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1010101010101010101010101010101010101010101111111111111111111111111111>1 %_Br[0.8196 0.01 1 0.31 1 50 100 %_Bs0.9333 0.2078 1 0.5 1 50 57.3034 %_Bs0.0314 0.0196 0.9137 0 1 50 55.618 %_Bs0.2 0.6549 0.9529 0.0667 1 50 49.4382 %_Bs0.9647 0.9176 0 0 1 45 32.5843 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (White, Black)(White, Black) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 0 1 1 50 100 %_Bs0 0 0 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 k([Registration]) Pc([Registration]) Pc0 0 0 0 k(White) Pc0 0 0 1 k(Black) Pc0 0 0 0.8 k(80% Black) Pc0 0 0 0.6 k(60% Black) Pc0 0 0 0.4 k(40% Black) Pc0 0 0 0.2 k(20% Black) Pc0 1 1 0 k(Red M=100 Y=100) Pc0 0.75 0.75 0 k(75% Red M=75 Y=75) Pc0 0.5 0.5 0 k(50% Red M=50 Y=50) Pc0 0.25 0.25 0 k(25% Red M=25 Y=25) Pc0.8 0 1 0 k(Green C=80 Y=100) Pc0.6 0 0.75 0 k(75% Green C=60 Y=75) Pc0.4 0 0.5 0 k(50% Green C=40 Y=50) Pc0.2 0 0.25 0 k(25% Green C=20 Y=25) Pc1 0.5 0 0 k(Blue C=100 M=50) Pc0.75 0.375 0 0 k(75% Blue C=75 M=37.5) Pc0.5 0.25 0 0 k(50% Blue C=50 M=25) Pc0.25 0.125 0 0 k(25% Blue C=25 M=12.5) Pc0 0.5 1 0 k(Orange M=50 Y=100) Pc0 0.375 0.75 0 k(75% Orange M=37.5 Y=75) Pc0 0.25 0.5 0 k(50% Orange M=25 Y=50) Pc0 0.125 0.25 0 k(25% Orange M=12.5 Y=25) Pc0.5 0.9 0 0 k(Violet C=50 M=90) Pc0.375 0.675 0 0 k(75% Violet C=37.5 M=67.5) Pc0.25 0.45 0 0 k(50% Violet C=25 M=45 ) Pc0.125 0.225 0 0 k(25% Violet C=12.5 M=22.5) Pc0.8 0 0 0 k(Azure C=80) Pc0.6 0 0 0 k(75% Azure C=60) Pc0.4 0 0 0 k(50% Azure C=40) Pc0.2 0 0 0 k(25% Azure C=20) Pc0 0 1 0 k(Yellow) Pc0 0 0.75 0 k(75% Yellow) Pc0 0 0.5 0 k(50% Yellow) Pc0 0 0.25 0 k(25% Yellow) Pc0 0.91 0.87 0 (PANTONE Red 032 CVU) 0 x(PANTONE Red 032 CVU) PcBb2 (White, Black) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(White, Black) PcBb0 0 0 0 Bh2 (Black, White Radial) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(Black, White Radial) PcBb2 (Steel Bar II) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(Steel Bar II) PcBb2 (Rainbow) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(Rainbow) PcBb0 0 0 0 Bh2 (Emerald Eye) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(Emerald Eye) PcBb2 (Sunset) -4022.5 4740.5 0 0 1 0 0 1 0 0 Bg0 BB(Sunset) Pc(Red Tablecloth) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Red Tablecloth) Pc(Pyramids) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Pyramids) Pc(Azure Rings) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Azure Rings) Pc(Red Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Red Stripe) Pc(Clown Attack) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Clown Attack) Pc(Camouflage) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Camouflage) PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 5 255 79 255 Lb(GREY SHADOW) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 255 79 79 Lb(BALL) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 4 255 255 79 Lb(SSW) LnLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 2 79 255 79 Lb(WEB) Ln0 Au1 Ap0 O0 0 0 0.15 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR298.8262 475.0005 m285.4883 453.6089 280.3022 432.7593 287.2422 428.4312 c294.1855 424.105 310.623 437.937 323.9609 459.3296 c337.2988 480.7222 342.4844 501.5718 335.5449 505.8989 c328.6035 510.2271 312.1641 496.3931 298.8262 475.0005 cf0 0 0 0 k299.0117 474.6606 m288.2207 457.355 283.8789 440.5796 289.3125 437.1909 c294.75 433.8042 307.9004 445.0854 318.6914 462.3921 c329.4805 479.6978 333.8223 496.4751 328.3887 499.8618 c322.9531 503.2515 309.8008 491.9692 299.0117 474.6606 cf0 0 0 0.15 k334.9063 466.0698 m334.9063 459.8062 329.8281 454.7261 323.5645 454.7261 c317.3008 454.7261 312.2207 459.8062 312.2207 466.0698 c312.2207 472.3345 317.3008 477.4126 323.5645 477.4126 c329.8281 477.4126 334.9063 472.3345 334.9063 466.0698 cfU0 0.91 0.87 0 (PANTONE Red 032 CVU) 0 x290.8379 483.4458 m277.5005 462.0542 272.3149 441.2046 279.2549 436.8765 c286.1973 432.5483 302.6348 446.3823 315.9727 467.7749 c329.3105 489.1665 334.4961 510.0161 327.5566 514.3433 c320.6152 518.6714 304.1758 504.8384 290.8379 483.4458 cf0 0 0 0 k291.0234 483.106 m280.2334 465.8003 275.8916 449.0249 281.3252 445.6362 c286.7617 442.2476 299.9131 453.5288 310.7031 470.8354 c321.4932 488.1431 325.835 504.9204 320.4014 508.3071 c314.9658 511.6958 301.8135 500.4146 291.0234 483.106 cf326.9189 474.5142 m326.9189 468.2495 321.8408 463.1714 315.5771 463.1714 c309.3135 463.1714 304.2334 468.2495 304.2334 474.5142 c304.2334 480.7798 309.3135 485.8579 315.5771 485.8579 c321.8408 485.8579 326.9189 480.7798 326.9189 474.5142 cBb0 0 0 0 Bh1 (Unnamed gradient 1) 326.5176 486.4253 -130.6833 21.8346 1 0 0 1 0 0 Bg-14.2333 -16.5579 -16.5579 14.2333 326.5176 486.4253 Bmf0 BB0 Ap0 0 0 1 k255.9629 485.4155 m255.3076 486.9458 253.4858 487.3833 v250.5708 488.4028 247.3647 487.3091 v245.3975 486.436 247.438 485.561 v250.4976 484.8325 250.9351 484.8325 v251.3726 484.8325 250.4976 484.8325 y259.8979 483.9585 261.501 482.2817 v264.5615 480.5337 264.0513 477.3999 v263.7603 473.9028 261.1367 471.936 v257.1294 468.0737 247.1465 467.1987 v235.7793 466.6167 232.5732 469.3843 v230.1689 470.769 229.2944 474.7036 v241.3901 475.9429 l242.6284 473.7563 244.1587 473.5376 v246.4907 472.7368 249.4053 473.1743 v252.4653 473.3188 253.0483 474.1216 v254.0684 475.2134 252.5386 475.7974 v245.689 476.7446 l238.9854 477.5454 236.9453 479.2944 v230.3872 483.813 235.9248 489.7876 v238.1836 493.1392 249.915 493.5767 v256.2544 493.6489 260.9907 491.2446 v264.7798 488.9849 264.7798 486.2896 v256.1089 485.4888 lF280.9756 484.3013 m280.5044 485.603 279.1909 485.9751 v277.0898 486.8423 274.7793 485.9126 v273.3613 485.1685 274.8315 484.4243 v277.0366 483.8052 277.3525 483.8052 v277.668 483.8052 277.0366 483.8052 y283.8115 483.061 284.9678 481.6353 v287.1729 480.146 286.8047 477.481 v286.5947 474.5044 284.7051 472.8325 v281.8169 469.5464 274.6221 468.8022 v266.4302 468.3042 264.1187 470.6616 v262.3862 471.8403 261.7559 475.186 v270.4731 476.2407 l271.3662 474.3794 272.4683 474.1958 v274.1494 473.5122 276.25 473.8872 v278.4556 474.0083 278.8755 474.6899 v279.6113 475.6196 278.5078 476.1177 v273.5723 476.9233 l268.7407 477.604 267.2695 479.0923 v262.5435 482.936 266.5342 488.02 v268.1616 490.8726 276.6177 491.2446 v281.186 491.3071 284.6006 489.2612 v287.3301 487.3384 287.3301 485.0435 v281.082 484.3628 lF286.7842 490.0063 m294.3623 489.4224 l295.0176 480.1685 l299.0254 488.9126 l303.9072 488.5483 l304.4902 480.1685 l307.9873 488.1841 l312.0684 487.8198 l304.3447 470.769 l299.6807 470.6245 l299.1709 480.3872 l294.7988 470.3315 l289.334 470.1128 l286.7842 490.0063 lf0 R0 0 0 0 K0.3 w311.998 485.2446 m314.2549 485.4087 316.5713 484.3794 v316.6602 484.3403 316.749 484.2993 316.8379 484.2554 c318.3418 483.5259 319.834 482.272 320.7129 480.1216 c325.0127 475.2349 324.4824 467.519 vS305.6973 479.8853 m308.4648 481.1812 310.9971 481.9468 v315.1191 483.478 314.3535 485.0679 vS311.292 482.1235 m316.5918 482.0649 317.6514 483.7134 vS310.7637 481.8804 m316.1416 483.5728 320.5215 480.1382 v322.3633 476.5044 320.0732 469.9819 v317.3838 463.4604 316.9863 463.2612 vS318.3809 466.0503 m318.2813 465.7515 l318.0322 468.9878 312.0088 468.3901 v311.6602 468.0405 l314.3984 474.9614 306.3838 473.7173 v309.3701 477.1021 308.1758 480.9849 vS324.3496 467.5444 m324.3438 467.4897 324.3379 467.439 324.332 467.3882 cS316.0908 484.5688 m316.29 483.9712 321.5664 483.7222 v322.9111 481.0835 326.3955 476.7534 v325.2012 475.856 324.5039 469.0366 v324.4424 468.4409 324.3916 467.9468 324.3496 467.5444 cS304.4912 471.9751 m312.0576 480.7349 320.3213 479.8394 v323.457 479.7397 325.9463 477.2017 vS318.5791 483.1255 m319.6748 482.7271 321.3174 482.7271 v321.4658 480.8853 323.9551 478.7446 v326.4443 476.603 325.001 477.9976 y323.7568 478.5952 323.7568 474.0649 v323.9063 473.6177 l323.0098 474.7134 320.7695 472.1743 v320.6699 471.7251 l320.0225 473.5161 316.1396 472.9692 v315.9902 472.8208 l316.1895 476.853 311.0625 477.4009 v314.1992 479.9888 313.2031 482.229 vS1 w321.5664 483.7222 mS0.3 w318.4805 466.2495 m322.6123 471.0288 324.5039 468.8882 vS321.5664 483.7222 m320.4717 475.3599 308.873 465.5015 vSu*u0 O0 0.91 0.87 0 (PANTONE Red 032 CVU) 0 x0 0.91 0.87 0 (PANTONE Red 032 CVU) 0 X0.25 w229.9688 463.3618 m229.7578 463.5156 229.418 463.6377 229.1841 463.6196 c228.9458 463.6011 228.7651 463.4272 228.7837 463.1895 c228.8237 462.6719 229.958 462.6909 230.0366 461.6816 c230.082 461.1006 229.772 460.5503 229.084 460.4966 c228.6387 460.4619 228.3047 460.5688 228.0137 460.7588 c228.064 461.395 L228.3276 461.2031 228.7041 461.0728 228.9604 461.0928 c229.2256 461.1138 229.3887 461.2856 229.3701 461.5234 c229.3237 462.1206 228.1895 462.1016 228.1157 463.0474 c228.0674 463.6709 228.4897 464.1714 229.1104 464.2197 c229.4072 464.2432 229.73 464.167 230.0093 464.0029 C229.9688 463.3618 lb*U*u233.2959 462.2388 m233.248 461.0547 232.5732 460.7686 231.9932 460.7231 c230.9409 460.6411 230.4868 461.3022 230.5283 462.2197 c230.6206 464.2896 L231.2725 464.3403 L231.1841 462.2817 L231.1484 461.46 231.6714 461.3682 231.9414 461.3892 c232.2876 461.416 232.6226 461.644 232.6479 462.252 c232.7388 464.4546 L233.3906 464.5059 L233.2959 462.2388 lb*U*u235.0547 464.6353 m235.603 464.6782 236.0938 464.3604 236.1499 463.6416 c236.2202 462.7378 235.6567 462.4229 235.1304 462.3818 c234.6133 462.3413 L234.5571 460.9707 L233.9053 460.9199 L234.0518 464.5571 L235.0547 464.6353 lb1 D234.6367 462.9121 m234.9111 462.9336 L235.3428 462.9673 235.5024 463.2402 235.478 463.5571 c235.4541 463.8584 235.2563 464.0767 234.8379 464.0444 c234.6807 464.0322 L234.6367 462.9121 lb*U*u0 D238.5503 464.3018 m237.2871 464.2031 L237.25 463.3442 L238.3604 463.4312 L238.3354 462.8228 L237.2246 462.7363 L237.186 461.7817 L238.7778 461.9058 L238.7529 461.2979 L236.5088 461.123 L236.6597 464.7603 L238.5757 464.9097 L238.5503 464.3018 lb*U*u240.334 465.0469 m241.1118 465.1074 241.418 464.4878 241.4526 464.0439 c241.4868 463.6055 241.3022 463.187 240.8423 463.0503 c240.8433 463.0396 L241.0161 462.9683 241.0986 462.8364 241.1997 462.6421 c241.7612 461.5322 L241.042 461.4761 L240.6929 462.1826 L240.3813 462.8125 240.3032 462.8857 239.9839 462.8608 c239.8442 462.8501 L239.7871 461.3784 L239.1353 461.3276 L239.2817 464.9648 L240.334 465.0469 lb1 D239.8682 463.4155 m240.1919 463.4409 L240.6328 463.4751 240.7969 463.7485 240.7764 464.0127 c240.7539 464.2979 240.5518 464.4575 240.228 464.4326 c239.9087 464.4077 L239.8682 463.4155 lb*U*u0 D242.7012 461.6055 m242.0493 461.5547 L242.2002 465.1924 L242.8521 465.2432 L242.7012 461.6055 lb*U*u245.0254 461.7388 m244.1348 461.6694 243.4248 462.3052 243.3477 463.2935 c243.2568 464.4609 243.9546 465.377 244.9932 465.4575 c245.8882 465.5273 246.5571 464.8989 246.6323 463.9321 c246.729 462.6904 246.0415 461.8179 245.0254 461.7388 cb1 D245 464.7886 m244.4067 464.7422 243.9629 464.1069 244.0195 463.3828 c244.0674 462.7646 244.4609 462.3647 244.978 462.4048 c245.585 462.4521 246.02 463.0815 245.9619 463.8267 c245.9155 464.4238 245.5127 464.8281 245 464.7886 cb*U*u0 D248.3428 465.6709 m249.1206 465.7314 249.4268 465.1123 249.4614 464.6685 c249.4956 464.2295 249.311 463.811 248.8511 463.6743 c248.8521 463.6641 L249.0249 463.5923 249.1074 463.4604 249.2085 463.2661 c249.77 462.1563 L249.0508 462.1006 L248.7017 462.8066 L248.3901 463.4365 248.312 463.5103 247.9927 463.4854 c247.8535 463.4741 L247.7959 462.0024 L247.144 461.9517 L247.2905 465.5889 L248.3428 465.6709 lb1 D247.877 464.0396 m248.2007 464.0649 L248.6416 464.0991 248.8057 464.3726 248.7852 464.6367 c248.7632 464.9224 248.5605 465.082 248.2368 465.0566 c247.9175 465.0317 L247.877 464.0396 lb*U*u0 D254.0737 465.0327 m253.8784 465.1748 253.5645 465.2881 253.3481 465.2715 c253.1279 465.2539 252.9604 465.0938 252.9775 464.874 c253.0146 464.395 254.0635 464.4126 254.1362 463.4795 c254.1777 462.9424 253.8911 462.4336 253.2554 462.3838 c252.8438 462.3516 252.5347 462.4507 252.2661 462.626 c252.312 463.2148 L252.5562 463.0371 252.9043 462.917 253.1411 462.9351 c253.3862 462.9546 253.5371 463.1138 253.52 463.3335 c253.4771 463.8853 252.4287 463.8677 252.3604 464.7422 c252.3154 465.3188 252.7061 465.7817 253.2798 465.8262 c253.5542 465.8477 253.8525 465.7773 254.1108 465.6255 C254.0737 465.0327 lb*U*u256.0864 462.6045 m255.2632 462.5405 254.6069 463.1279 254.5356 464.0415 c254.4517 465.1216 255.0967 465.9678 256.0571 466.043 c256.8843 466.1074 257.5024 465.5264 257.5723 464.6323 c257.6616 463.4844 257.0259 462.6777 256.0864 462.6045 cb1 D256.0635 465.4238 m255.5146 465.3813 255.1045 464.7939 255.1567 464.1245 c255.2012 463.5527 255.5645 463.1831 256.0425 463.2202 c256.604 463.2642 257.0063 463.8462 256.9526 464.5347 c256.9097 465.0869 256.5371 465.4609 256.0635 465.4238 cb*U*u0 D259.7871 465.729 m258.7603 465.6489 L258.7305 464.8501 L259.6162 464.9194 L259.5933 464.3574 L258.7075 464.2881 L258.644 462.8481 L258.041 462.8013 L258.1807 466.1641 L259.8145 466.2915 L259.7871 465.729 lb*U*u262.3901 465.9316 m261.4668 465.8599 L261.3506 463.0591 L260.7476 463.0122 L260.8643 465.813 L259.9663 465.7427 L259.9893 466.3052 L262.4131 466.4937 L262.3901 465.9316 lb*U*u265.2329 463.3174 m264.9878 463.2983 L264.3696 465.3242 L263.5742 463.188 L263.3247 463.1685 L262.4839 466.4995 L263.0532 466.5439 L263.5054 464.6079 L263.5137 464.6089 L264.2632 466.6382 L264.5581 466.6611 L265.1353 464.7349 L265.1436 464.7358 L265.7559 466.7544 L266.3667 466.8018 L265.2329 463.3174 lb*U*u268.7104 463.6323 m268.0908 463.5845 L267.9468 464.3052 L267.0654 464.2368 L266.8477 463.4873 L266.1826 463.4355 L267.3081 466.9194 L267.9482 466.9692 L268.7104 463.6323 lb1 D267.2031 464.7241 m267.8599 464.7754 L267.5952 466.2393 L267.5869 466.2383 L267.2031 464.7241 lb*U*u0 D270.1802 467.0991 m270.8994 467.1553 271.1826 466.5825 271.2144 466.1724 c271.2461 465.7666 271.0752 465.3799 270.6504 465.2534 c270.6509 465.2437 L270.811 465.1772 270.8872 465.0557 270.981 464.876 c271.5 463.8501 L270.835 463.7983 L270.5122 464.4512 L270.2241 465.0332 270.1519 465.1016 269.8564 465.0786 c269.7275 465.0684 L269.6748 463.7075 L269.0718 463.6606 L269.207 467.0234 L270.1802 467.0991 lb1 D269.7495 465.5913 m270.0493 465.6143 L270.4565 465.646 270.6084 465.8989 270.5894 466.1431 c270.5688 466.4067 270.3813 466.5547 270.082 466.5313 c269.7871 466.5083 L269.7495 465.5913 lb*U*u0 D273.6411 466.8086 m272.4727 466.7173 L272.4385 465.9233 L273.4653 466.0034 L273.4424 465.4414 L272.4155 465.3613 L272.3794 464.479 L273.8511 464.5938 L273.8281 464.0313 L271.7534 463.8696 L271.8931 467.2324 L273.6641 467.3706 L273.6411 466.8086 lb*U*u277.8726 466.8701 m277.7368 466.936 277.6626 466.9526 277.5747 466.9458 c277.3535 466.9287 277.2378 466.7393 277.2451 466.3472 c277.5771 466.373 L277.5586 465.9199 L277.2227 465.894 L277.1182 463.3896 L276.603 463.3496 L276.7075 465.8535 L276.356 465.8262 L276.3745 466.2793 L276.7295 466.3066 L276.7402 467.0615 277.0669 467.4028 277.4678 467.4341 c277.605 467.4448 277.7334 467.4233 277.8921 467.3633 C277.8726 466.8701 lb*U*u278.667 464.3677 m278.1743 464.3296 277.7593 464.7305 277.7163 465.2822 c277.668 465.9014 278.0786 466.4482 278.6284 466.4907 c279.1245 466.5298 279.5166 466.1812 279.562 465.5977 c279.6128 464.9473 279.2246 464.4111 278.667 464.3677 cb278.644 465.9956 m278.3081 465.9692 278.2373 465.4946 278.2534 465.2881 c278.2773 464.9785 278.4795 464.8496 278.6323 464.8618 c278.9302 464.8848 279.0483 465.2915 279.0264 465.5742 c279.0054 465.8433 278.854 466.0117 278.644 465.9956 cb*U*u280.479 466.3057 m280.4873 466.2974 L280.6294 466.543 280.7549 466.6567 280.8809 466.6665 c280.9839 466.6743 281.0767 466.6187 281.2075 466.4663 c281.0107 465.8867 L280.9111 466.0322 280.8335 466.0942 280.7495 466.0874 c280.6274 466.0781 280.5063 465.9063 280.4595 465.7671 c280.4087 464.5444 L279.8931 464.5039 L279.979 466.5601 L280.4941 466.6001 L280.479 466.3057 lb*U*u287.3022 465.041 m287.0771 465.0234 L286.5093 466.8838 L285.7788 464.9224 L285.5498 464.9043 L284.7773 467.9634 L285.3008 468.0039 L285.7158 466.2261 L285.7231 466.2271 L286.4116 468.0903 L286.6826 468.1118 L287.2124 466.3428 L287.2202 466.3433 L287.7822 468.1973 L288.3438 468.2412 L287.3022 465.041 lb*U*u289.1167 465.2227 m288.563 465.1797 L288.6909 468.2681 L289.2446 468.3115 L289.1167 465.2227 lb*U*u292.1099 465.4561 m291.583 465.415 L290.3525 467.4048 L290.3447 467.4038 L290.2622 465.312 L289.7085 465.269 L289.8364 468.3574 L290.3901 468.4004 L291.5957 466.4858 L291.6035 466.4863 L291.6807 468.501 L292.2344 468.5444 L292.1099 465.4561 lb*U*u293.6738 468.6567 m294.7124 468.7373 295.082 467.9355 295.1338 467.2715 c295.2046 466.3608 294.7217 465.6597 294.0269 465.6055 c292.6826 465.501 L292.8071 468.5889 L293.6738 468.6567 lb1 D293.2573 466.0601 m293.7769 466.1006 L294.3916 466.1484 294.6016 466.7065 294.5601 467.2358 c294.5186 467.7744 294.1792 468.1812 293.6064 468.1367 c293.3394 468.1157 L293.2573 466.0601 lb*U*u0 D296.9355 465.7915 m296.1792 465.7329 295.5767 466.2725 295.5112 467.1113 c295.4341 468.103 296.0264 468.8804 296.9082 468.9492 c297.668 469.0083 298.2358 468.4751 298.2998 467.6538 c298.3823 466.5996 297.7983 465.8589 296.9355 465.7915 cb1 D296.9141 468.3809 m296.4102 468.3418 296.0337 467.8022 296.0815 467.1875 c296.1226 466.6626 296.4561 466.3232 296.895 466.3574 c297.4106 466.3975 297.7798 466.9316 297.7305 467.5645 c297.6914 468.0713 297.3496 468.415 296.9141 468.3809 cb*U*u0 D300.9106 466.1016 m300.6855 466.084 L300.1182 467.9443 L299.3872 465.9829 L299.1582 465.9648 L298.3857 469.0239 L298.9092 469.0645 L299.3242 467.2866 L299.332 467.2876 L300.02 469.1509 L300.291 469.1724 L300.8208 467.4033 L300.8286 467.4038 L301.3906 469.2578 L301.9521 469.3018 L300.9106 466.1016 lb*U*u303.686 468.6919 m303.5068 468.8223 303.2183 468.9263 303.0195 468.9111 c302.8174 468.895 302.6636 468.7476 302.6792 468.5459 c302.7139 468.106 303.6768 468.1226 303.7432 467.2656 c303.7817 466.772 303.5186 466.3047 302.9346 466.2593 c302.5566 466.2295 302.2729 466.3203 302.0259 466.4819 c302.0684 467.022 L302.2925 466.8589 302.6118 466.7485 302.8296 466.7656 c303.0552 466.7832 303.1934 466.9292 303.1777 467.1313 c303.1382 467.6382 302.1753 467.6221 302.1128 468.4248 c302.0713 468.9546 302.4302 469.3794 302.957 469.4204 c303.209 469.4404 303.4829 469.376 303.7202 469.2363 C303.686 468.6919 lb*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF